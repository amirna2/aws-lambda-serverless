service:
  name: auction-service

plugins:
  - serverless-bundle # using webpack to bundle the app
  - serverless-pseudo-parameters
provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}

  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
    - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM}

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}

  getAuctionById:
    handler: src/handlers/getAuctionById.handler
    events:
      - http:
          method: GET
          path: /auction/{id}  
          authorizer: ${self:custom.authorizer}
  
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: auction/{id}/bid
          authorizer: ${self:custom.authorizer}

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          method: PATCH
          path: auction/{id}/picture
          authorizer: ${self:custom.authorizer}

  # Using AWS EventBridge to scheducle an event every minute
  # commented out for development
  # use "sls invoke -f processAuctions -l" from CLI to manually trigger the event 
  processAuctions:
    handler: src/handlers/processAuctions.handler    
#    events:
#      - schedule: rate(1 minute)
          
custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable # intrinsic functions
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    # importing the (exported) MailQueue outputs from cloud formation
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-4m1rn4th00-${self:provider.stage}
  bundle:
    linting: false
